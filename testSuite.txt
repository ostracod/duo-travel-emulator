
START_TEST Number literal
LOAD print:123
LOAD print:4.5
RUN
EXPECT_OUTPUT 123
EXPECT_OUTPUT 4.5
STOP_TEST

START_TEST Character literal
LOAD print:'A'
LOAD print:'\''
RUN
EXPECT_OUTPUT 65
EXPECT_OUTPUT 39
STOP_TEST

START_TEST Character literal missing apostrophe
LOAD print:'A
RUN
EXPECT_ERROR MISSING_APOSTROPHE
STOP_TEST

START_TEST String literal
LOAD print:"HELLO WORLD"
LOAD print:"AB\"CD\"EF"
RUN
EXPECT_OUTPUT HELLO WORLD
EXPECT_OUTPUT AB"CD"EF
STOP_TEST

START_TEST String literal missing quotation mark
LOAD print:"HELLO WORLD
RUN
EXPECT_ERROR MISSING_QUOTATION_MARK
STOP_TEST

START_TEST List literal
LOAD A=[10,20,30]
LOAD print:A[0]
LOAD print:A[1]
LOAD print:A[2]
RUN
EXPECT_OUTPUT 10
EXPECT_OUTPUT 20
EXPECT_OUTPUT 30
STOP_TEST

START_TEST List literal missing bracket
LOAD A=[10,20,30
RUN
EXPECT_ERROR MISSING_BRACKET
STOP_TEST

START_TEST Variables
LOAD A=5
LOAD BREAD="HELLO"
LOAD print:A
LOAD print:BREAD
RUN
EXPECT_OUTPUT 5
EXPECT_OUTPUT HELLO
STOP_TEST

START_TEST Brackets with strings
LOAD print:"CBABC"[2]
RUN
EXPECT_OUTPUT 65
STOP_TEST

START_TEST Brackets bad index 1
LOAD print:"CBABC"[9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 2
LOAD print:"CBABC"[-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 3
LOAD print:[10,20,30][9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 4
LOAD print:[10,20,30][-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Addition
LOAD print:2+5
LOAD print:"HELLO "+"WORLD"
RUN
EXPECT_OUTPUT 7
EXPECT_OUTPUT HELLO WORLD
STOP_TEST

START_TEST Addition bad type 1
LOAD print:2+"WORLD"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 2
LOAD print:"BREAD"+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 3
LOAD print:2+[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 4
LOAD print:[]+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction
LOAD print:5-2
RUN
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Subtraction bad type 1
LOAD print:2-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction bad type 2
LOAD print:[]-5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Negative
LOAD print:-2
RUN
EXPECT_OUTPUT -2
STOP_TEST

START_TEST Negative bad type
LOAD print:-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication
LOAD print:5*2
RUN
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Multiplication bad type 1
LOAD print:2*[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication bad type 2
LOAD print:[]*5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division
LOAD print:10/2
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Division bad type 1
LOAD print:2/[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division bad type 2
LOAD print:[]/5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division by zero
LOAD print:10/0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Modulus
LOAD print:11%3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Modulus bad type 1
LOAD print:2%[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus bad type 2
LOAD print:[]%5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus by zero
LOAD print:11%0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Boolean AND
LOAD print:0&&0
LOAD print:1&&0
LOAD print:0&&1
LOAD print:1&&1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean AND bad type 1
LOAD print:2&&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND bad type 2
LOAD print:[]&&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR
LOAD print:0||0
LOAD print:1||0
LOAD print:0||1
LOAD print:1||1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean OR bad type 1
LOAD print:2||[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR bad type 2
LOAD print:[]||5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR
LOAD print:0^^0
LOAD print:1^^0
LOAD print:0^^1
LOAD print:1^^1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean XOR bad type 1
LOAD print:2^^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR bad type 2
LOAD print:[]^^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean NOT
LOAD print:!0
LOAD print:!1
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean NOT bad type
LOAD print:![]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND
LOAD print:3&5
RUN
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Bitwise AND bad type 1
LOAD print:2&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND bad type 2
LOAD print:[]&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR
LOAD print:3|5
RUN
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Bitwise OR bad type 1
LOAD print:2|[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR bad type 2
LOAD print:[]|5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR
LOAD print:3^5
RUN
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Bitwise XOR bad type 1
LOAD print:2^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR bad type 2
LOAD print:[]^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise NOT
LOAD print:(~1)&3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Bitwise NOT bad type
LOAD print:~[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left
LOAD print:10<<1
RUN
EXPECT_OUTPUT 20
STOP_TEST

START_TEST Bitshift left bad type 1
LOAD print:2<<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left bad type 2
LOAD print:[]<<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right
LOAD print:10>>1
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Bitshift right bad type 1
LOAD print:2>>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right bad type 2
LOAD print:[]>>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment
LOAD A=5
LOAD print:++A
LOAD print:A++
LOAD print:A
LOAD B="$"
LOAD print:++(B[0])
LOAD print:(B[0])++
LOAD print:B[0]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 6
EXPECT_OUTPUT 7
EXPECT_OUTPUT 37
EXPECT_OUTPUT 37
EXPECT_OUTPUT 38
STOP_TEST

START_TEST Increment bad type 1
LOAD print:++[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment bad type 2
LOAD print:[]++
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement
LOAD A=5
LOAD print:--A
LOAD print:A--
LOAD print:A
LOAD B="$"
LOAD print:--(B[0])
LOAD print:(B[0])--
LOAD print:B[0]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
EXPECT_OUTPUT 3
EXPECT_OUTPUT 35
EXPECT_OUTPUT 35
EXPECT_OUTPUT 34
STOP_TEST

START_TEST Decrement bad type 1
LOAD print:--[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement bad type 2
LOAD print:[]--
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than
LOAD print:3>5
LOAD print:5>3
LOAD print:5>5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Greater than bad type 1
LOAD print:2>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than bad type 2
LOAD print:[]>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than
LOAD print:3<5
LOAD print:5<3
LOAD print:5<5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Less than bad type 1
LOAD print:2<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than bad type 2
LOAD print:[]<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal
LOAD print:3==5
LOAD print:5==5
LOAD print:"BREAD"=="HELLO"
LOAD print:"BREAD"=="BREAD"
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Equal bad type 1
LOAD print:2=="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 2
LOAD print:"HELLO"==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 3
LOAD print:2==[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 4
LOAD print:[]==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal
LOAD print:3!=5
LOAD print:5!=5
LOAD print:"BREAD"!="HELLO"
LOAD print:"BREAD"!="BREAD"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Not equal bad type 1
LOAD print:2!="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 2
LOAD print:"HELLO"!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 3
LOAD print:2!=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 4
LOAD print:[]!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal
LOAD print:3>=5
LOAD print:5>=3
LOAD print:5>=5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Greater than or equal bad type 1
LOAD print:2>=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal bad type 2
LOAD print:[]>=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal
LOAD print:3<=5
LOAD print:5<-3
LOAD print:5<=5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Less than or equal bad type 1
LOAD print:2<=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal bad type 2
LOAD print:[]<=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A=6
LOAD B[2]=65
LOAD C[1]=25
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 01A345
EXPECT_OUTPUT 25
STOP_TEST

START_TEST Assign bad destination
LOAD 5=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Add assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A+=1
LOAD B[2]+=1
LOAD C[1]+=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
LOAD A="HELLO "
LOAD B=[10,"PASTA ",30]
LOAD A+="WORLD"
LOAD B[1]+="SAUCE"
LOAD print:A
LOAD print:B[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 013345
EXPECT_OUTPUT 21
EXPECT_OUTPUT HELLO WORLD
EXPECT_OUTPUT PASTA SAUCE
STOP_TEST

START_TEST Add assign bad destination
LOAD 5+=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Add assign bad type 1
LOAD A=5
LOAD A+="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 2
LOAD A="HELLO"
LOAD A+=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 3
LOAD A=5
LOAD A+=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 4
LOAD A=[]
LOAD A+=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtract assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A-=1
LOAD B[2]-=1
LOAD C[1]-=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 19
STOP_TEST

START_TEST Subtract assign bad destination
LOAD 5-=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Subtract assign bad type 1
LOAD A=5
LOAD A-=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtract assign bad type 2
LOAD A=[]
LOAD A-=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiply assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A*=2
LOAD B[2]*=2
LOAD C[1]*=2
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 10
EXPECT_OUTPUT 01d345
EXPECT_OUTPUT 40
STOP_TEST

START_TEST Multiply assign bad destination
LOAD 5*=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Multiply assign bad type 1
LOAD A=5
LOAD A*=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiply assign bad type 2
LOAD A=[]
LOAD A*=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Divide assign
LOAD A=6
LOAD B="01P345"
LOAD C=[10,20,30]
LOAD A/=2
LOAD B[2]/=2
LOAD C[1]/=2
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 01(345
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Divide assign divide by zero
LOAD A=10
LOAD A/=0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Divide assign bad destination
LOAD 5/=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Divide assign bad type 1
LOAD A=5
LOAD A/=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Divide assign bad type 2
LOAD A=[]
LOAD A/=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus assign
LOAD A=6
LOAD B="01Q345"
LOAD C=[10,20,30]
LOAD A%=5
LOAD B[2]%=5
LOAD B[2]+=48
LOAD C[1]%=7
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Modulus assign divide by zero
LOAD A=10
LOAD A%=0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Modulus assign bad destination
LOAD 5%=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Modulus assign bad type 1
LOAD A=5
LOAD A%=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus assign bad type 2
LOAD A=[]
LOAD A%=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A&&=0
LOAD B&&=1
LOAD C&&=0
LOAD D&&=1
LOAD E[2]&&=0
LOAD E[2]+=48
LOAD F[1]&&=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean AND assign bad destination
LOAD 5&&=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean AND assign bad type 1
LOAD A=5
LOAD A&&=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND assign bad type 2
LOAD A=[]
LOAD A&&=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A||=0
LOAD B||=1
LOAD C||=0
LOAD D||=1
LOAD E[2]||=0
LOAD E[2]+=48
LOAD F[1]||=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean OR assign bad destination
LOAD 5||=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean OR assign bad type 1
LOAD A=5
LOAD A||=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR assign bad type 2
LOAD A=[]
LOAD A||=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A^^=0
LOAD B^^=1
LOAD C^^=0
LOAD D^^=1
LOAD E[2]^^=0
LOAD E[2]+=48
LOAD F[1]^^=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean XOR assign bad destination
LOAD 5^^=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean XOR assign bad type 1
LOAD A=5
LOAD A^^=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR assign bad type 2
LOAD A=[]
LOAD A^^=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A&=3
LOAD B[2]&=48
LOAD C[1]&=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Bitwise AND assign bad destination
LOAD 5&=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise AND assign bad type 1
LOAD A=5
LOAD A&=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND assign bad type 2
LOAD A=[]
LOAD A&=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A|=3
LOAD B[2]|=1
LOAD C[1]|=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 7
EXPECT_OUTPUT 013345
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Bitwise OR assign bad destination
LOAD 5|=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise OR assign bad type 1
LOAD A=5
LOAD A|=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR assign bad type 2
LOAD A=[]
LOAD A|=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A^=3
LOAD B[2]^=2
LOAD C[1]^=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Bitwise XOR assign bad destination
LOAD 5^=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise XOR assign bad type 1
LOAD A=5
LOAD A^=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR assign bad type 2
LOAD A=[]
LOAD A^=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left assign
LOAD A=6
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A<<=1
LOAD B[2]<<=1
LOAD C[1]<<=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 12
EXPECT_OUTPUT 01d345
EXPECT_OUTPUT 40
STOP_TEST

START_TEST Bitshift left assign bad destination
LOAD 5<<=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitshift left assign bad type 1
LOAD A=5
LOAD A<<=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left assign bad type 2
LOAD A=[]
LOAD A<<=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right assign
LOAD A=6
LOAD B="01P345"
LOAD C=[10,20,30]
LOAD A>>=1
LOAD B[2]>>=1
LOAD C[1]>>=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 01(345
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Bitshift right assign bad destination
LOAD 5>>=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitshift right assign bad type 1
LOAD A=5
LOAD A>>=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right assign bad type 2
LOAD A=[]
LOAD A>>=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Order of operations
LOAD print:3+4+5
LOAD print:3*4+5
LOAD print:3+4*5
LOAD print:3*4*5
RUN
EXPECT_OUTPUT 12
EXPECT_OUTPUT 17
EXPECT_OUTPUT 23
EXPECT_OUTPUT 60
STOP_TEST

START_TEST Parentheses
LOAD print:3*(4+5)
LOAD print:(3+4)*5
RUN
EXPECT_OUTPUT 27
EXPECT_OUTPUT 35
STOP_TEST

START_TEST If
LOAD if:1
LOAD print:1
LOAD if:1
LOAD print:2
LOAD if:0
LOAD print:3
LOAD end;
LOAD print:4
LOAD end;
LOAD print:5
LOAD end;
LOAD print:6
LOAD if:0
LOAD print:7
LOAD if:1
LOAD print:8
LOAD end;
LOAD print:9
LOAD end;
LOAD print:10
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
EXPECT_OUTPUT 6
EXPECT_OUTPUT 10
STOP_TEST

START_TEST If not top level
LOAD print:if:0
RUN
EXPECT_ERROR NOT_TOP_LEVEL
STOP_TEST

START_TEST Bad end statement
LOAD end;
RUN
EXPECT_ERROR BAD_END_STATEMENT
STOP_TEST

START_TEST Else if
LOAD if:0
LOAD print:1
LOAD elif:0
LOAD print:2
LOAD elif:1
LOAD print:3
LOAD elif:1
LOAD print:4
LOAD end;
LOAD print:5
LOAD if:1
LOAD print:6
LOAD elif:0
LOAD print:7
LOAD elif:1
LOAD print:8
LOAD elif:1
LOAD print:9
LOAD end;
LOAD print:10
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 5
EXPECT_OUTPUT 6
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Else
LOAD if:0
LOAD print:1
LOAD else;
LOAD print:2
LOAD end;
LOAD print:3
LOAD if:1
LOAD print:4
LOAD else;
LOAD print:5
LOAD end;
LOAD print:6
LOAD if:0
LOAD print:7
LOAD elif:0
LOAD print:8
LOAD else;
LOAD print:9
LOAD end;
LOAD print:10
LOAD if:0
LOAD print:11
LOAD elif:1
LOAD print:12
LOAD else;
LOAD print:13
LOAD end;
LOAD print:14
RUN
EXPECT_OUTPUT 2
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
EXPECT_OUTPUT 6
EXPECT_OUTPUT 9
EXPECT_OUTPUT 10
EXPECT_OUTPUT 12
EXPECT_OUTPUT 14
STOP_TEST

START_TEST While
LOAD A=0
LOAD while:A<5
LOAD A++
LOAD print:A
LOAD end;
LOAD print:"FINISHED"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
EXPECT_OUTPUT FINISHED
STOP_TEST

START_TEST Break
LOAD A=0
LOAD while:A<5
LOAD A++
LOAD if:A==3
LOAD break;
LOAD end;
LOAD print:A
LOAD end;
LOAD print:"FINISHED"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT FINISHED
STOP_TEST

START_TEST Bad break statement
LOAD break;
RUN
EXPECT_ERROR BAD_BREAK_STATEMENT
STOP_TEST
