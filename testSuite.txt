
START_TEST Number literal
LOAD print:123
LOAD print:4.5
RUN
EXPECT_OUTPUT 123
EXPECT_OUTPUT 4.5
STOP_TEST

START_TEST Character literal
LOAD print:'A'
LOAD print:'\''
RUN
EXPECT_OUTPUT 65
EXPECT_OUTPUT 39
STOP_TEST

START_TEST Character literal missing apostrophe
LOAD print:'A
RUN
EXPECT_ERROR MISSING_APOSTROPHE
STOP_TEST

START_TEST String literal
LOAD print:"HELLO WORLD"
LOAD print:"AB\"CD\"EF"
RUN
EXPECT_OUTPUT HELLO WORLD
EXPECT_OUTPUT AB"CD"EF
STOP_TEST

START_TEST String literal missing quotation mark
LOAD print:"HELLO WORLD
RUN
EXPECT_ERROR MISSING_QUOTATION_MARK
STOP_TEST

START_TEST List literal
LOAD A=[10,20,30]
LOAD print:A[0]
LOAD print:A[1]
LOAD print:A[2]
RUN
EXPECT_OUTPUT 10
EXPECT_OUTPUT 20
EXPECT_OUTPUT 30
STOP_TEST

START_TEST List literal missing bracket
LOAD A=[10,20,30
RUN
EXPECT_ERROR MISSING_BRACKET
STOP_TEST

START_TEST Variables
LOAD A=5
LOAD BREAD="HELLO"
LOAD print:A
LOAD print:BREAD
RUN
EXPECT_OUTPUT 5
EXPECT_OUTPUT HELLO
STOP_TEST

START_TEST Brackets with strings
LOAD print:"CBABC"[2]
RUN
EXPECT_OUTPUT 65
STOP_TEST

START_TEST Brackets bad index 1
LOAD print:"CBABC"[9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 2
LOAD print:"CBABC"[-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 3
LOAD print:[10,20,30][9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 4
LOAD print:[10,20,30][-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Addition
LOAD print:2+5
LOAD print:"HELLO "+"WORLD"
RUN
EXPECT_OUTPUT 7
EXPECT_OUTPUT HELLO WORLD
STOP_TEST

START_TEST Addition bad type 1
LOAD print:2+"WORLD"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 2
LOAD print:"BREAD"+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 3
LOAD print:2+[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 4
LOAD print:[]+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction
LOAD print:5-2
RUN
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Subtraction bad type 1
LOAD print:2-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction bad type 2
LOAD print:[]-5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Negative
LOAD print:-2
RUN
EXPECT_OUTPUT -2
STOP_TEST

START_TEST Negative bad type
LOAD print:-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication
LOAD print:5*2
RUN
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Multiplication bad type 1
LOAD print:2*[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication bad type 2
LOAD print:[]*5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division
LOAD print:10/2
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Division bad type 1
LOAD print:2/[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division bad type 2
LOAD print:[]/5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division by zero
LOAD print:10/0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Modulus
LOAD print:11%3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Modulus bad type 1
LOAD print:2%[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus bad type 2
LOAD print:[]%5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus by zero
LOAD print:11%0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Boolean AND
LOAD print:0&&0
LOAD print:1&&0
LOAD print:0&&1
LOAD print:1&&1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean AND bad type 1
LOAD print:2&&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND bad type 2
LOAD print:[]&&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR
LOAD print:0||0
LOAD print:1||0
LOAD print:0||1
LOAD print:1||1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean OR bad type 1
LOAD print:2||[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR bad type 2
LOAD print:[]||5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR
LOAD print:0^^0
LOAD print:1^^0
LOAD print:0^^1
LOAD print:1^^1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean XOR bad type 1
LOAD print:2^^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR bad type 2
LOAD print:[]^^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean NOT
LOAD print:!0
LOAD print:!1
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean NOT bad type
LOAD print:![]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND
LOAD print:3&5
RUN
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Bitwise AND bad type 1
LOAD print:2&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND bad type 2
LOAD print:[]&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR
LOAD print:3|5
RUN
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Bitwise OR bad type 1
LOAD print:2|[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR bad type 2
LOAD print:[]|5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR
LOAD print:3^5
RUN
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Bitwise XOR bad type 1
LOAD print:2^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR bad type 2
LOAD print:[]^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise NOT
LOAD print:(~1)&3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Bitwise NOT bad type
LOAD print:~[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left
LOAD print:10<<1
RUN
EXPECT_OUTPUT 20
STOP_TEST

START_TEST Bitshift left bad type 1
LOAD print:2<<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left bad type 2
LOAD print:[]<<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right
LOAD print:10>>1
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Bitshift right bad type 1
LOAD print:2>>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right bad type 2
LOAD print:[]>>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment
LOAD A=5
LOAD print:++A
LOAD print:A++
LOAD print:A
LOAD B="$"
LOAD print:++(B[0])
LOAD print:(B[0])++
LOAD print:B[0]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 6
EXPECT_OUTPUT 7
EXPECT_OUTPUT 37
EXPECT_OUTPUT 37
EXPECT_OUTPUT 38
STOP_TEST

START_TEST Increment bad type 1
LOAD print:++[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment bad type 2
LOAD print:[]++
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement
LOAD A=5
LOAD print:--A
LOAD print:A--
LOAD print:A
LOAD B="$"
LOAD print:--(B[0])
LOAD print:(B[0])--
LOAD print:B[0]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
EXPECT_OUTPUT 3
EXPECT_OUTPUT 35
EXPECT_OUTPUT 35
EXPECT_OUTPUT 34
STOP_TEST

START_TEST Decrement bad type 1
LOAD print:--[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement bad type 2
LOAD print:[]--
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than
LOAD print:3>5
LOAD print:5>3
LOAD print:5>5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Greater than bad type 1
LOAD print:2>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than bad type 2
LOAD print:[]>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than
LOAD print:3<5
LOAD print:5<3
LOAD print:5<5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Less than bad type 1
LOAD print:2<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than bad type 2
LOAD print:[]<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal
LOAD print:3==5
LOAD print:5==5
LOAD print:"BREAD"=="HELLO"
LOAD print:"BREAD"=="BREAD"
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Equal bad type 1
LOAD print:2=="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 2
LOAD print:"HELLO"==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 3
LOAD print:2==[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 4
LOAD print:[]==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal
LOAD print:3!=5
LOAD print:5!=5
LOAD print:"BREAD"!="HELLO"
LOAD print:"BREAD"!="BREAD"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Not equal bad type 1
LOAD print:2!="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 2
LOAD print:"HELLO"!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 3
LOAD print:2!=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 4
LOAD print:[]!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal
LOAD print:3>=5
LOAD print:5>=3
LOAD print:5>=5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Greater than or equal bad type 1
LOAD print:2>=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal bad type 2
LOAD print:[]>=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal
LOAD print:3<=5
LOAD print:5<-3
LOAD print:5<=5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Less than or equal bad type 1
LOAD print:2<=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal bad type 2
LOAD print:[]<=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Assign bad destination
LOAD 5=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST
