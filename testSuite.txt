
START_TEST Number literal
LOAD print:123
LOAD print:4.5
RUN
EXPECT_OUTPUT 123
EXPECT_OUTPUT 4.5
STOP_TEST

START_TEST Character literal
LOAD print:'A'
LOAD print:'\''
RUN
EXPECT_OUTPUT 65
EXPECT_OUTPUT 39
STOP_TEST

START_TEST Character literal missing apostrophe
LOAD print:'A
RUN
EXPECT_ERROR MISSING_APOSTROPHE
STOP_TEST

START_TEST String literal
LOAD print:"HELLO WORLD"
LOAD print:"AB\"CD\"EF"
RUN
EXPECT_OUTPUT HELLO WORLD
EXPECT_OUTPUT AB"CD"EF
STOP_TEST

START_TEST String literal missing quotation mark
LOAD print:"HELLO WORLD
RUN
EXPECT_ERROR MISSING_QUOTATION_MARK
STOP_TEST

START_TEST List literal
LOAD A=[10,20,30]
LOAD print:A[0]
LOAD print:A[1]
LOAD print:A[2]
RUN
EXPECT_OUTPUT 10
EXPECT_OUTPUT 20
EXPECT_OUTPUT 30
STOP_TEST

START_TEST List literal missing bracket
LOAD A=[10,20,30
RUN
EXPECT_ERROR MISSING_BRACKET
STOP_TEST

START_TEST Variables
LOAD A=5
LOAD BREAD="HELLO"
LOAD print:A
LOAD print:BREAD
RUN
EXPECT_OUTPUT 5
EXPECT_OUTPUT HELLO
STOP_TEST

START_TEST Missing value 1
LOAD A=B
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 2
LOAD A=B+5
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 3
LOAD A=5+B
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 4
LOAD A=!B
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 5
LOAD A=B[5]
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 6
LOAD A="HELLO"[B]
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Not missing value
LOAD func:A,B,C
LOAD print:B+C
LOAD end;
LOAD A:2,5
RUN
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Missing value 7
LOAD func:A,B,C
LOAD print:B+C
LOAD end;
LOAD D:2,5
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 8
LOAD func:A,B,C
LOAD print:B+C
LOAD end;
LOAD A:D,5
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 9
LOAD func:A,B,C
LOAD D=9
LOAD print:B+C
LOAD end;
LOAD A:2,5
LOAD E=D
RUN
EXPECT_OUTPUT 7
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Missing value 10
LOAD print:A
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Brackets with strings
LOAD print:"CBABC"[2]
RUN
EXPECT_OUTPUT 65
STOP_TEST

START_TEST Missing value 11
LOAD A=[10,B,30]
RUN
EXPECT_ERROR MISSING_VALUE
STOP_TEST

START_TEST Brackets bad index 1
LOAD print:"CBABC"[9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 2
LOAD print:"CBABC"[-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 3
LOAD print:[10,20,30][9]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Brackets bad index 4
LOAD print:[10,20,30][-3]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Addition
LOAD print:2+5
LOAD print:"HELLO "+"WORLD"
RUN
EXPECT_OUTPUT 7
EXPECT_OUTPUT HELLO WORLD
STOP_TEST

START_TEST Addition bad type 1
LOAD print:2+"WORLD"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 2
LOAD print:"BREAD"+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 3
LOAD print:2+[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Addition bad type 4
LOAD print:[]+5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction
LOAD print:5-2
RUN
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Subtraction bad type 1
LOAD print:2-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtraction bad type 2
LOAD print:[]-5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Negative
LOAD print:-2
RUN
EXPECT_OUTPUT -2
STOP_TEST

START_TEST Negative bad type
LOAD print:-[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication
LOAD print:5*2
RUN
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Multiplication bad type 1
LOAD print:2*[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiplication bad type 2
LOAD print:[]*5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division
LOAD print:10/2
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Division bad type 1
LOAD print:2/[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division bad type 2
LOAD print:[]/5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Division by zero
LOAD print:10/0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Modulus
LOAD print:11%3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Modulus bad type 1
LOAD print:2%[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus bad type 2
LOAD print:[]%5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus by zero
LOAD print:11%0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Boolean AND
LOAD print:0&&0
LOAD print:1&&0
LOAD print:0&&1
LOAD print:1&&1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean AND bad type 1
LOAD print:2&&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND bad type 2
LOAD print:[]&&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR
LOAD print:0||0
LOAD print:1||0
LOAD print:0||1
LOAD print:1||1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean OR bad type 1
LOAD print:2||[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR bad type 2
LOAD print:[]||5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR
LOAD print:0^^0
LOAD print:1^^0
LOAD print:0^^1
LOAD print:1^^1
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean XOR bad type 1
LOAD print:2^^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR bad type 2
LOAD print:[]^^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean NOT
LOAD print:!0
LOAD print:!1
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean NOT bad type
LOAD print:![]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND
LOAD print:3&5
RUN
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Bitwise AND bad type 1
LOAD print:2&[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND bad type 2
LOAD print:[]&5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR
LOAD print:3|5
RUN
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Bitwise OR bad type 1
LOAD print:2|[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR bad type 2
LOAD print:[]|5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR
LOAD print:3^5
RUN
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Bitwise XOR bad type 1
LOAD print:2^[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR bad type 2
LOAD print:[]^5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise NOT
LOAD print:(~1)&3
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Bitwise NOT bad type
LOAD print:~[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left
LOAD print:10<<1
RUN
EXPECT_OUTPUT 20
STOP_TEST

START_TEST Bitshift left bad type 1
LOAD print:2<<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left bad type 2
LOAD print:[]<<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right
LOAD print:10>>1
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Bitshift right bad type 1
LOAD print:2>>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right bad type 2
LOAD print:[]>>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment
LOAD A=5
LOAD print:++A
LOAD print:A++
LOAD print:A
LOAD B="$"
LOAD print:++(B[0])
LOAD print:(B[0])++
LOAD print:B[0]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 6
EXPECT_OUTPUT 7
EXPECT_OUTPUT 37
EXPECT_OUTPUT 37
EXPECT_OUTPUT 38
STOP_TEST

START_TEST Increment bad type 1
LOAD print:++[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Increment bad type 2
LOAD print:[]++
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement
LOAD A=5
LOAD print:--A
LOAD print:A--
LOAD print:A
LOAD B="$"
LOAD print:--(B[0])
LOAD print:(B[0])--
LOAD print:B[0]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
EXPECT_OUTPUT 3
EXPECT_OUTPUT 35
EXPECT_OUTPUT 35
EXPECT_OUTPUT 34
STOP_TEST

START_TEST Decrement bad type 1
LOAD print:--[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Decrement bad type 2
LOAD print:[]--
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than
LOAD print:3>5
LOAD print:5>3
LOAD print:5>5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Greater than bad type 1
LOAD print:2>[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than bad type 2
LOAD print:[]>5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than
LOAD print:3<5
LOAD print:5<3
LOAD print:5<5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Less than bad type 1
LOAD print:2<[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than bad type 2
LOAD print:[]<5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal
LOAD print:3==5
LOAD print:5==5
LOAD print:"BREAD"=="HELLO"
LOAD print:"BREAD"=="BREAD"
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Equal bad type 1
LOAD print:2=="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 2
LOAD print:"HELLO"==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 3
LOAD print:2==[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Equal bad type 4
LOAD print:[]==5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal
LOAD print:3!=5
LOAD print:5!=5
LOAD print:"BREAD"!="HELLO"
LOAD print:"BREAD"!="BREAD"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Not equal bad type 1
LOAD print:2!="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 2
LOAD print:"HELLO"!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 3
LOAD print:2!=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Not equal bad type 4
LOAD print:[]!=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal
LOAD print:3>=5
LOAD print:5>=3
LOAD print:5>=5
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Greater than or equal bad type 1
LOAD print:2>=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Greater than or equal bad type 2
LOAD print:[]>=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal
LOAD print:3<=5
LOAD print:5<-3
LOAD print:5<=5
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Less than or equal bad type 1
LOAD print:2<=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Less than or equal bad type 2
LOAD print:[]<=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A=6
LOAD B[2]=65
LOAD C[1]=25
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 01A345
EXPECT_OUTPUT 25
STOP_TEST

START_TEST Assign bad destination
LOAD 5=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Add assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A+=1
LOAD B[2]+=1
LOAD C[1]+=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
LOAD A="HELLO "
LOAD B=[10,"PASTA ",30]
LOAD A+="WORLD"
LOAD B[1]+="SAUCE"
LOAD print:A
LOAD print:B[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 013345
EXPECT_OUTPUT 21
EXPECT_OUTPUT HELLO WORLD
EXPECT_OUTPUT PASTA SAUCE
STOP_TEST

START_TEST Add assign bad destination
LOAD 5+=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Add assign bad type 1
LOAD A=5
LOAD A+="HELLO"
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 2
LOAD A="HELLO"
LOAD A+=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 3
LOAD A=5
LOAD A+=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Add assign bad type 4
LOAD A=[]
LOAD A+=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtract assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A-=1
LOAD B[2]-=1
LOAD C[1]-=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 19
STOP_TEST

START_TEST Subtract assign bad destination
LOAD 5-=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Subtract assign bad type 1
LOAD A=5
LOAD A-=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Subtract assign bad type 2
LOAD A=[]
LOAD A-=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiply assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A*=2
LOAD B[2]*=2
LOAD C[1]*=2
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 10
EXPECT_OUTPUT 01d345
EXPECT_OUTPUT 40
STOP_TEST

START_TEST Multiply assign bad destination
LOAD 5*=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Multiply assign bad type 1
LOAD A=5
LOAD A*=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Multiply assign bad type 2
LOAD A=[]
LOAD A*=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Divide assign
LOAD A=6
LOAD B="01P345"
LOAD C=[10,20,30]
LOAD A/=2
LOAD B[2]/=2
LOAD C[1]/=2
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 01(345
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Divide assign divide by zero
LOAD A=10
LOAD A/=0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Divide assign bad destination
LOAD 5/=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Divide assign bad type 1
LOAD A=5
LOAD A/=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Divide assign bad type 2
LOAD A=[]
LOAD A/=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus assign
LOAD A=6
LOAD B="01Q345"
LOAD C=[10,20,30]
LOAD A%=5
LOAD B[2]%=5
LOAD B[2]+=48
LOAD C[1]%=7
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Modulus assign divide by zero
LOAD A=10
LOAD A%=0
RUN
EXPECT_ERROR DIVIDE_BY_ZERO
STOP_TEST

START_TEST Modulus assign bad destination
LOAD 5%=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Modulus assign bad type 1
LOAD A=5
LOAD A%=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Modulus assign bad type 2
LOAD A=[]
LOAD A%=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A&&=0
LOAD B&&=1
LOAD C&&=0
LOAD D&&=1
LOAD E[2]&&=0
LOAD E[2]+=48
LOAD F[1]&&=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 0
STOP_TEST

START_TEST Boolean AND assign bad destination
LOAD 5&&=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean AND assign bad type 1
LOAD A=5
LOAD A&&=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean AND assign bad type 2
LOAD A=[]
LOAD A&&=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A||=0
LOAD B||=1
LOAD C||=0
LOAD D||=1
LOAD E[2]||=0
LOAD E[2]+=48
LOAD F[1]||=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean OR assign bad destination
LOAD 5||=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean OR assign bad type 1
LOAD A=5
LOAD A||=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean OR assign bad type 2
LOAD A=[]
LOAD A||=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR assign
LOAD A=0
LOAD B=0
LOAD C=1
LOAD D=1
LOAD E="012345"
LOAD F=[10,20,30]
LOAD A^^=0
LOAD B^^=1
LOAD C^^=0
LOAD D^^=1
LOAD E[2]^^=0
LOAD E[2]+=48
LOAD F[1]^^=0
LOAD print:A
LOAD print:B
LOAD print:C
LOAD print:D
LOAD print:E
LOAD print:F[1]
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 0
EXPECT_OUTPUT 011345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Boolean XOR assign bad destination
LOAD 5^^=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Boolean XOR assign bad type 1
LOAD A=5
LOAD A^^=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Boolean XOR assign bad type 2
LOAD A=[]
LOAD A^^=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A&=3
LOAD B[2]&=48
LOAD C[1]&=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Bitwise AND assign bad destination
LOAD 5&=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise AND assign bad type 1
LOAD A=5
LOAD A&=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise AND assign bad type 2
LOAD A=[]
LOAD A&=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A|=3
LOAD B[2]|=1
LOAD C[1]|=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 7
EXPECT_OUTPUT 013345
EXPECT_OUTPUT 7
STOP_TEST

START_TEST Bitwise OR assign bad destination
LOAD 5|=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise OR assign bad type 1
LOAD A=5
LOAD A|=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise OR assign bad type 2
LOAD A=[]
LOAD A|=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR assign
LOAD A=5
LOAD B="012345"
LOAD C=[10,5,30]
LOAD A^=3
LOAD B[2]^=2
LOAD C[1]^=3
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 6
EXPECT_OUTPUT 010345
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Bitwise XOR assign bad destination
LOAD 5^=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitwise XOR assign bad type 1
LOAD A=5
LOAD A^=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitwise XOR assign bad type 2
LOAD A=[]
LOAD A^=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left assign
LOAD A=6
LOAD B="012345"
LOAD C=[10,20,30]
LOAD A<<=1
LOAD B[2]<<=1
LOAD C[1]<<=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 12
EXPECT_OUTPUT 01d345
EXPECT_OUTPUT 40
STOP_TEST

START_TEST Bitshift left assign bad destination
LOAD 5<<=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitshift left assign bad type 1
LOAD A=5
LOAD A<<=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift left assign bad type 2
LOAD A=[]
LOAD A<<=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right assign
LOAD A=6
LOAD B="01P345"
LOAD C=[10,20,30]
LOAD A>>=1
LOAD B[2]>>=1
LOAD C[1]>>=1
LOAD print:A
LOAD print:B
LOAD print:C[1]
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 01(345
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Bitshift right assign bad destination
LOAD 5>>=3
RUN
EXPECT_ERROR BAD_DESTINATION
STOP_TEST

START_TEST Bitshift right assign bad type 1
LOAD A=5
LOAD A>>=[]
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Bitshift right assign bad type 2
LOAD A=[]
LOAD A>>=5
RUN
EXPECT_ERROR BAD_OPERAND_TYPE
STOP_TEST

START_TEST Order of operations
LOAD print:3+4+5
LOAD print:3*4+5
LOAD print:3+4*5
LOAD print:3*4*5
LOAD print:3<<1<<2
RUN
EXPECT_OUTPUT 12
EXPECT_OUTPUT 17
EXPECT_OUTPUT 23
EXPECT_OUTPUT 60
EXPECT_OUTPUT 24
STOP_TEST

START_TEST Parentheses
LOAD print:3*(4+5)
LOAD print:(3+4)*5
RUN
EXPECT_OUTPUT 27
EXPECT_OUTPUT 35
STOP_TEST

START_TEST If
LOAD if:1
LOAD print:1
LOAD if:1
LOAD print:2
LOAD if:0
LOAD print:3
LOAD end;
LOAD print:4
LOAD end;
LOAD print:5
LOAD end;
LOAD print:6
LOAD if:0
LOAD print:7
LOAD if:1
LOAD print:8
LOAD end;
LOAD print:9
LOAD end;
LOAD print:10
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
EXPECT_OUTPUT 6
EXPECT_OUTPUT 10
STOP_TEST

START_TEST If not top level
LOAD print:if:0
RUN
EXPECT_ERROR NOT_TOP_LEVEL
STOP_TEST

START_TEST Bad end statement
LOAD end;
RUN
EXPECT_ERROR BAD_END_STATEMENT
STOP_TEST

START_TEST Else if
LOAD if:0
LOAD print:1
LOAD elif:0
LOAD print:2
LOAD elif:1
LOAD print:3
LOAD elif:1
LOAD print:4
LOAD end;
LOAD print:5
LOAD if:1
LOAD print:6
LOAD elif:0
LOAD print:7
LOAD elif:1
LOAD print:8
LOAD elif:1
LOAD print:9
LOAD end;
LOAD print:10
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 5
EXPECT_OUTPUT 6
EXPECT_OUTPUT 10
STOP_TEST

START_TEST Else
LOAD if:0
LOAD print:1
LOAD else;
LOAD print:2
LOAD end;
LOAD print:3
LOAD if:1
LOAD print:4
LOAD else;
LOAD print:5
LOAD end;
LOAD print:6
LOAD if:0
LOAD print:7
LOAD elif:0
LOAD print:8
LOAD else;
LOAD print:9
LOAD end;
LOAD print:10
LOAD if:0
LOAD print:11
LOAD elif:1
LOAD print:12
LOAD else;
LOAD print:13
LOAD end;
LOAD print:14
RUN
EXPECT_OUTPUT 2
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
EXPECT_OUTPUT 6
EXPECT_OUTPUT 9
EXPECT_OUTPUT 10
EXPECT_OUTPUT 12
EXPECT_OUTPUT 14
STOP_TEST

START_TEST While
LOAD A=0
LOAD while:A<5
LOAD A++
LOAD print:A
LOAD end;
LOAD print:"FINISHED"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
EXPECT_OUTPUT FINISHED
STOP_TEST

START_TEST Break
LOAD A=0
LOAD while:A<5
LOAD A++
LOAD if:A==3
LOAD break;
LOAD end;
LOAD print:A
LOAD end;
LOAD print:"FINISHED"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT FINISHED
STOP_TEST

START_TEST Bad break statement
LOAD break;
RUN
EXPECT_ERROR BAD_BREAK_STATEMENT
STOP_TEST

START_TEST Continue
LOAD A=0
LOAD while:A<5
LOAD A++
LOAD if:A==3
LOAD cont;
LOAD end;
LOAD print:A
LOAD end;
LOAD print:"FINISHED"
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
EXPECT_OUTPUT FINISHED
STOP_TEST

START_TEST Bad continue statement
LOAD cont;
RUN
EXPECT_ERROR BAD_CONTINUE_STATEMENT
STOP_TEST

START_TEST Function
LOAD func:A
LOAD print:1
LOAD end;
LOAD print:2
LOAD A;
LOAD print:3
RUN
EXPECT_OUTPUT 2
EXPECT_OUTPUT 1
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Function with global variables
LOAD func:A
LOAD print:B
LOAD end;
LOAD B=20
LOAD print:2
LOAD A;
LOAD print:3
RUN
EXPECT_OUTPUT 2
EXPECT_OUTPUT 20
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Function with arguments
LOAD func:A,B,C
LOAD print:B+C
LOAD end;
LOAD print:2
LOAD A:2,5
LOAD print:3
RUN
EXPECT_OUTPUT 2
EXPECT_OUTPUT 7
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Return
LOAD func:A
LOAD print:1
LOAD ret;
LOAD print:2
LOAD end;
LOAD print:3
LOAD A;
LOAD print:4
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 1
EXPECT_OUTPUT 4
STOP_TEST

START_TEST Return with value
LOAD func:A
LOAD print:1
LOAD ret:10
LOAD print:2
LOAD end;
LOAD print:3
LOAD print:A;
LOAD print:4
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 1
EXPECT_OUTPUT 10
EXPECT_OUTPUT 4
STOP_TEST

START_TEST Function recursion
LOAD func:A,B
LOAD if:B>0
LOAD print:B
LOAD A:B-1
LOAD end;
LOAD end;
LOAD print:"START"
LOAD A:5
LOAD print:"FINISH"
RUN
EXPECT_OUTPUT START
EXPECT_OUTPUT 5
EXPECT_OUTPUT 4
EXPECT_OUTPUT 3
EXPECT_OUTPUT 2
EXPECT_OUTPUT 1
EXPECT_OUTPUT FINISH
STOP_TEST

START_TEST Random
LOAD A=rand;
LOAD B=rand;
LOAD C=rand;
LOAD D=rand;
LOAD print:A!=B||B!=C||C!=D
RUN
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Random integer
LOAD A=randInt:1,10
LOAD B=randInt:1,10
LOAD C=randInt:1,10
LOAD D=randInt:1,10
LOAD print:A>=1&&A<=10
LOAD print:B>=1&&B<=10
LOAD print:C>=1&&C<=10
LOAD print:D>=1&&D<=10
LOAD print:A!=B||B!=C||C!=D
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Random integer bad type 1
LOAD randInt:5,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Random integer bad type 2
LOAD randInt:[],5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Absolute value
LOAD print:abs:5
LOAD print:abs:-5
RUN
EXPECT_OUTPUT 5
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Absolute value bad type
LOAD abs:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Round
LOAD print:round:3.4
LOAD print:round:3.5
LOAD print:round:3.6
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
STOP_TEST

START_TEST Round bad type
LOAD round:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Floor
LOAD print:floor:3.4
LOAD print:floor:3.5
LOAD print:floor:3.6
RUN
EXPECT_OUTPUT 3
EXPECT_OUTPUT 3
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Floor bad type
LOAD floor:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Ceiling
LOAD print:ceil:3.4
LOAD print:ceil:3.5
LOAD print:ceil:3.6
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
EXPECT_OUTPUT 4
STOP_TEST

START_TEST Ceiling bad type
LOAD ceil:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Sine
LOAD print:sin:1
RUN
EXPECT_OUTPUT 0.841471
STOP_TEST

START_TEST Sine bad type
LOAD sin:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Cosine
LOAD print:cos:1
RUN
EXPECT_OUTPUT 0.540302
STOP_TEST

START_TEST Cosine bad type
LOAD cos:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Tangent
LOAD print:tan:1
RUN
EXPECT_OUTPUT 1.557408
STOP_TEST

START_TEST Tangent bad type
LOAD tan:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Square root
LOAD print:sqrt:9
RUN
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Square root bad value
LOAD sqrt:-1
RUN
EXPECT_ERROR BAD_VALUE
STOP_TEST

START_TEST Square root bad type
LOAD sqrt:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Power
LOAD print:pow:7,2
RUN
EXPECT_OUTPUT 49
STOP_TEST

START_TEST Power bad value
LOAD pow:-1,0.5
RUN
EXPECT_ERROR BAD_VALUE
STOP_TEST

START_TEST Power bad type 1
LOAD pow:[],2
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Power bad type 2
LOAD pow:2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Log
LOAD print:log:100,10
RUN
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Log bad value 1
LOAD log:-1,2
RUN
EXPECT_ERROR BAD_VALUE
STOP_TEST

START_TEST Log bad value 2
LOAD log:2,-1
RUN
EXPECT_ERROR BAD_VALUE
STOP_TEST

START_TEST Log bad type 1
LOAD log:[],2
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Log bad type 2
LOAD log:2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Request string
LOAD print:reqStr;
RUN
PRESS_KEY SELECT_OPTION
PRESS_KEY SYMBOL_RIGHT
PRESS_KEY SELECT_OPTION
PRESS_KEY FINISH
EXPECT_OUTPUT AB
STOP_TEST

START_TEST Request number
LOAD A=reqNum;
LOAD print:A
LOAD print:type:A
RUN
PRESS_KEY SYMBOL_RIGHT
PRESS_KEY SELECT_OPTION
PRESS_KEY SYMBOL_RIGHT
PRESS_KEY SELECT_OPTION
PRESS_KEY FINISH
EXPECT_OUTPUT 12
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Menu
LOAD print:menu:"BREAD",["A","B","C","D"]
RUN
PRESS_KEY CURSOR_DOWN
PRESS_KEY CURSOR_DOWN
PRESS_KEY SELECT_OPTION
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Create file and file exists
LOAD print:fExists:"BREAD"
LOAD fCreate:"BREAD"
LOAD print:fExists:"BREAD"
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST File exists bad type
LOAD fExists:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Create file bad name 1
LOAD fCreate:"BREAD"
LOAD fCreate:"BREAD"
RUN
EXPECT_ERROR FILE_EXISTS
STOP_TEST

START_TEST Create file bad name 2
LOAD fCreate:"JKFHWEKJFHWEKJHFKEJWHFKWEJHFKWJEFKJFHEW"
RUN
EXPECT_ERROR NAME_IS_TOO_LONG
STOP_TEST

START_TEST Create file storage full
LOAD A=0
LOAD while:1
LOAD fCreate:str:A
LOAD A++
LOAD end;
RUN
EXPECT_ERROR STORAGE_IS_FULL
STOP_TEST

START_TEST Create file bad type
LOAD fCreate:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File size
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","12345"
LOAD print:fSize:"BREAD"
RUN
EXPECT_OUTPUT 5
STOP_TEST

START_TEST File size missing file
LOAD fSize:"BREAD"
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File size bad type
LOAD fSize:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File delete
LOAD fCreate:"BREAD"
LOAD fDelete:"BREAD"
LOAD print:fExists:"BREAD"
RUN
EXPECT_OUTPUT 0
STOP_TEST

START_TEST File delete missing file
LOAD fDelete:"BREAD"
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File delete bad type
LOAD fDelete:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File set name
LOAD fCreate:"HELLO"
LOAD fSetName:"HELLO","BREAD"
LOAD print:fExists:"HELLO"
LOAD print:fExists:"BREAD"
RUN
EXPECT_OUTPUT 0
EXPECT_OUTPUT 1
STOP_TEST

START_TEST File set name missing file
LOAD fSetName:"HELLO","BREAD"
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File set name bad name 1
LOAD fCreate:"HELLO"
LOAD fCreate:"BREAD"
LOAD fSetName:"HELLO","BREAD"
RUN
EXPECT_ERROR FILE_EXISTS
STOP_TEST

START_TEST File set name bad name 2
LOAD fCreate:"HELLO"
LOAD fSetName:"HELLO","FKWEHJKEFHWKJFBEWJKFHWEKJFHWEKJHWFEJKH"
RUN
EXPECT_ERROR NAME_IS_TOO_LONG
STOP_TEST

START_TEST File set name bad type 1
LOAD fSetName:[],"HELLO"
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File set name bad type 2
LOAD fSetName:"HELLO",[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File read
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","ABCDEFGHIJK"
LOAD print:fRead:"BREAD",2,3
RUN
EXPECT_OUTPUT CDE
STOP_TEST

START_TEST File read missing file
LOAD print:fRead:"BREAD",2,3
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File read bad index
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","ABCDEFGHIJK"
LOAD print:fRead:"BREAD",100,3
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST File read bad amount
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","ABCDEFGHIJK"
LOAD print:fRead:"BREAD",3,100
RUN
EXPECT_ERROR BAD_AMOUNT
STOP_TEST

START_TEST File read bad type 1
LOAD print:fRead:[],2,3
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File read bad type 2
LOAD print:fRead:"BREAD",[],3
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File read bad type 3
LOAD print:fRead:"BREAD",2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File write
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","ABCDEFGHIJK"
LOAD print:fRead:"BREAD",0,11
RUN
EXPECT_OUTPUT ABCDEFGHIJK
STOP_TEST

START_TEST File write missing file
LOAD fWrite:"BREAD","ABCDEFGHIJK"
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File write bad type 1
LOAD fWrite:[],"ABCDEFGHIJK"
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File write bad type 2
LOAD fWrite:"BREAD",[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST File import
LOAD fCreate:"BREAD"
LOAD fWrite:"BREAD","print:123"
LOAD fImport:"BREAD"
RUN
EXPECT_OUTPUT 123
STOP_TEST

START_TEST File import missing file
LOAD fImport:"BREAD"
RUN
EXPECT_ERROR MISSING_FILE
STOP_TEST

START_TEST File import bad type
LOAD fImport:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Convert to number
LOAD A=num:"123"
LOAD print:A
LOAD print:type:A
RUN
EXPECT_OUTPUT 123
EXPECT_OUTPUT 1
STOP_TEST

START_TEST Convert to number bad type
LOAD num:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Convert to string
LOAD A=str:123
LOAD print:A
LOAD print:type:A
RUN
EXPECT_OUTPUT 123
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Convert to string bad type
LOAD str:[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Get type
LOAD func:A
LOAD end;
LOAD print:type:5
LOAD print:type:"5"
LOAD print:type:[5]
LOAD print:type:A
RUN
EXPECT_OUTPUT 1
EXPECT_OUTPUT 2
EXPECT_OUTPUT 3
EXPECT_OUTPUT 4
STOP_TEST

START_TEST Get length
LOAD print:len:"1234"
LOAD print:len:[1,2,3,4,5]
RUN
EXPECT_OUTPUT 4
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Get length bad type
LOAD len:5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Copy
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD C=copy:A
LOAD D=copy:B
LOAD A[1]=65
LOAD B[1]=65
LOAD print:C
LOAD print:D[1]
RUN
EXPECT_OUTPUT 0123
EXPECT_OUTPUT 20
STOP_TEST

START_TEST Copy bad type
LOAD copy:5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD ins:A,2,'A'
LOAD ins:B,2,25
LOAD print:A
LOAD print:B[1]
LOAD print:B[2]
LOAD print:B[3]
LOAD print:len:B
RUN
EXPECT_OUTPUT 01A23
EXPECT_OUTPUT 20
EXPECT_OUTPUT 25
EXPECT_OUTPUT 30
EXPECT_OUTPUT 5
STOP_TEST

START_TEST Insert bad index 1
LOAD ins:"0123",100,'A'
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Insert bad index 2
LOAD ins:[10,20,30,40],100,25
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Insert bad type 1
LOAD ins:5,5,5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert bad type 2
LOAD ins:"0123",[],2
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert bad type 3
LOAD ins:"0123",2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Remove
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD rem:A,2
LOAD rem:B,2
LOAD print:A
LOAD print:B[1]
LOAD print:B[2]
LOAD print:len:B
RUN
EXPECT_OUTPUT 013
EXPECT_OUTPUT 20
EXPECT_OUTPUT 40
EXPECT_OUTPUT 3
STOP_TEST

START_TEST Remove bad index 1
LOAD rem:"0123",100
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Remove bad index 2
LOAD rem:[10,20,30,40],100
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Remove bad type 1
LOAD rem:5,5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Remove bad type 2
LOAD rem:"0123",[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Get subsequence
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD C=sub:A,1,3
LOAD D=sub:B,1,3
LOAD print:C
LOAD print:D[0]
LOAD print:D[1]
LOAD print:len:D
RUN
EXPECT_OUTPUT 12
EXPECT_OUTPUT 20
EXPECT_OUTPUT 30
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Get subsequence bad index 1
LOAD sub:"0123",100,102
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Get subsequence bad index 2
LOAD sub:[10,20,30,40],100,102
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Get subsequence bad type 1
LOAD sub:5,5,5
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Get subsequence bad type 2
LOAD sub:"0123",[],2
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Get subsequence bad type 3
LOAD sub:"0123",2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert subsequence
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD insSub:A,2,"AB"
LOAD insSub:B,2,[22,24]
LOAD print:A
LOAD print:B[1]
LOAD print:B[2]
LOAD print:B[3]
LOAD print:B[4]
LOAD print:len:B
RUN
EXPECT_OUTPUT 01AB23
EXPECT_OUTPUT 20
EXPECT_OUTPUT 22
EXPECT_OUTPUT 24
EXPECT_OUTPUT 30
EXPECT_OUTPUT 6
STOP_TEST

START_TEST Insert subsequence bad index 1
LOAD insSub:"0123",100,"AB"
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Insert subsequence bad index 2
LOAD insSub:[10,20,30,40],100,[22,24]
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Insert subsequence bad type 1
LOAD insSub:5,5,"AB"
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert subsequence bad type 2
LOAD insSub:"0123",[],"AB"
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Insert subsequence bad type 3
LOAD insSub:"0123",2,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Remove subsequence
LOAD A="0123"
LOAD B=[10,20,30,40]
LOAD remSub:A,1,3
LOAD remSub:B,1,3
LOAD print:A
LOAD print:B[0]
LOAD print:B[1]
LOAD print:len:B
RUN
EXPECT_OUTPUT 03
EXPECT_OUTPUT 10
EXPECT_OUTPUT 40
EXPECT_OUTPUT 2
STOP_TEST

START_TEST Remove subsequence bad index 1
LOAD remSub:"0123",100,102
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Remove subsequence bad index 2
LOAD remSub:[10,20,30,40],100,102
RUN
EXPECT_ERROR BAD_INDEX
STOP_TEST

START_TEST Remove subsequence bad type 1
LOAD remSub:5,5,7
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Remove subsequence bad type 2
LOAD remSub:"0123",[],7
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

START_TEST Remove subsequence bad type 3
LOAD remSub:"0123",5,[]
RUN
EXPECT_ERROR BAD_ARGUMENT_TYPE
STOP_TEST

